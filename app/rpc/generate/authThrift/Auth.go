// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package authThrift

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//   - Code
//   - Msg
type TTCustomException struct {
	Code int32  `thrift:"code,1" db:"code" json:"code"`
	Msg  string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewTTCustomException() *TTCustomException {
	return &TTCustomException{}
}

func (p *TTCustomException) GetCode() int32 {
	return p.Code
}

func (p *TTCustomException) GetMsg() string {
	return p.Msg
}
func (p *TTCustomException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTCustomException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *TTCustomException) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *TTCustomException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TTCustomException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTCustomException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *TTCustomException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *TTCustomException) Equals(other *TTCustomException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Code != other.Code {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *TTCustomException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTCustomException(%+v)", *p)
}

func (p *TTCustomException) Error() string {
	return p.String()
}

func (TTCustomException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TTCustomException)(nil)

// Attributes:
//   - UID
//   - Role
type AuthNeverExpireReturnee struct {
	UID  int64  `thrift:"uid,1" db:"uid" json:"uid"`
	Role string `thrift:"role,2" db:"role" json:"role"`
}

func NewAuthNeverExpireReturnee() *AuthNeverExpireReturnee {
	return &AuthNeverExpireReturnee{}
}

func (p *AuthNeverExpireReturnee) GetUID() int64 {
	return p.UID
}

func (p *AuthNeverExpireReturnee) GetRole() string {
	return p.Role
}
func (p *AuthNeverExpireReturnee) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthNeverExpireReturnee) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *AuthNeverExpireReturnee) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Role = v
	}
	return nil
}

func (p *AuthNeverExpireReturnee) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AuthNeverExpireReturnee"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthNeverExpireReturnee) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *AuthNeverExpireReturnee) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "role", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Role)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err)
	}
	return err
}

func (p *AuthNeverExpireReturnee) Equals(other *AuthNeverExpireReturnee) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UID != other.UID {
		return false
	}
	if p.Role != other.Role {
		return false
	}
	return true
}

func (p *AuthNeverExpireReturnee) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNeverExpireReturnee(%+v)", *p)
}

// Attributes:
//   - UID
//   - Role
//   - Token
type AuthSingleReturnee struct {
	UID   int64  `thrift:"uid,1" db:"uid" json:"uid"`
	Role  string `thrift:"role,2" db:"role" json:"role"`
	Token string `thrift:"token,3" db:"token" json:"token"`
}

func NewAuthSingleReturnee() *AuthSingleReturnee {
	return &AuthSingleReturnee{}
}

func (p *AuthSingleReturnee) GetUID() int64 {
	return p.UID
}

func (p *AuthSingleReturnee) GetRole() string {
	return p.Role
}

func (p *AuthSingleReturnee) GetToken() string {
	return p.Token
}
func (p *AuthSingleReturnee) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthSingleReturnee) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *AuthSingleReturnee) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Role = v
	}
	return nil
}

func (p *AuthSingleReturnee) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AuthSingleReturnee) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AuthSingleReturnee"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthSingleReturnee) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *AuthSingleReturnee) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "role", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Role)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err)
	}
	return err
}

func (p *AuthSingleReturnee) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:token: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:token: ", p), err)
	}
	return err
}

func (p *AuthSingleReturnee) Equals(other *AuthSingleReturnee) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UID != other.UID {
		return false
	}
	if p.Role != other.Role {
		return false
	}
	if p.Token != other.Token {
		return false
	}
	return true
}

func (p *AuthSingleReturnee) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthSingleReturnee(%+v)", *p)
}

// Attributes:
//   - UID
//   - Role
//   - SToken
//   - LToken
type AuthDoubleReturnee struct {
	UID    int64  `thrift:"uid,1" db:"uid" json:"uid"`
	Role   string `thrift:"role,2" db:"role" json:"role"`
	SToken string `thrift:"sToken,3" db:"sToken" json:"sToken"`
	LToken string `thrift:"lToken,4" db:"lToken" json:"lToken"`
}

func NewAuthDoubleReturnee() *AuthDoubleReturnee {
	return &AuthDoubleReturnee{}
}

func (p *AuthDoubleReturnee) GetUID() int64 {
	return p.UID
}

func (p *AuthDoubleReturnee) GetRole() string {
	return p.Role
}

func (p *AuthDoubleReturnee) GetSToken() string {
	return p.SToken
}

func (p *AuthDoubleReturnee) GetLToken() string {
	return p.LToken
}
func (p *AuthDoubleReturnee) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthDoubleReturnee) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *AuthDoubleReturnee) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Role = v
	}
	return nil
}

func (p *AuthDoubleReturnee) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SToken = v
	}
	return nil
}

func (p *AuthDoubleReturnee) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LToken = v
	}
	return nil
}

func (p *AuthDoubleReturnee) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AuthDoubleReturnee"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthDoubleReturnee) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *AuthDoubleReturnee) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "role", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Role)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err)
	}
	return err
}

func (p *AuthDoubleReturnee) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sToken", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sToken: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sToken (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sToken: ", p), err)
	}
	return err
}

func (p *AuthDoubleReturnee) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lToken", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lToken: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.LToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lToken (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lToken: ", p), err)
	}
	return err
}

func (p *AuthDoubleReturnee) Equals(other *AuthDoubleReturnee) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UID != other.UID {
		return false
	}
	if p.Role != other.Role {
		return false
	}
	if p.SToken != other.SToken {
		return false
	}
	if p.LToken != other.LToken {
		return false
	}
	return true
}

func (p *AuthDoubleReturnee) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthDoubleReturnee(%+v)", *p)
}

type AuthService interface {
	// Parameters:
	//  - AppId
	//  - Token
	CheckAuthByNeverExpire(ctx context.Context, appId string, token string) (_r *AuthNeverExpireReturnee, _err error)
	// Parameters:
	//  - AppId
	//  - Token
	CheckAuthBySingle(ctx context.Context, appId string, token string) (_r *AuthSingleReturnee, _err error)
	// Parameters:
	//  - AppId
	//  - SToken
	//  - LToken
	CheckAuthByDouble(ctx context.Context, appId string, sToken string, lToken string) (_r *AuthDoubleReturnee, _err error)
}

type AuthServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewAuthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthServiceClient {
	return &AuthServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAuthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthServiceClient {
	return &AuthServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAuthServiceClient(c thrift.TClient) *AuthServiceClient {
	return &AuthServiceClient{
		c: c,
	}
}

func (p *AuthServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AuthServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *AuthServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - AppId
//   - Token
func (p *AuthServiceClient) CheckAuthByNeverExpire(ctx context.Context, appId string, token string) (_r *AuthNeverExpireReturnee, _err error) {
	var _args0 AuthServiceCheckAuthByNeverExpireArgs
	_args0.AppId = appId
	_args0.Token = token
	var _result2 AuthServiceCheckAuthByNeverExpireResult
	var _meta1 thrift.ResponseMeta
	_meta1, _err = p.Client_().Call(ctx, "checkAuthByNeverExpire", &_args0, &_result2)
	p.SetLastResponseMeta_(_meta1)
	if _err != nil {
		return
	}
	switch {
	case _result2.E != nil:
		return _r, _result2.E
	}

	if _ret3 := _result2.GetSuccess(); _ret3 != nil {
		return _ret3, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "checkAuthByNeverExpire failed: unknown result")
}

// Parameters:
//   - AppId
//   - Token
func (p *AuthServiceClient) CheckAuthBySingle(ctx context.Context, appId string, token string) (_r *AuthSingleReturnee, _err error) {
	var _args4 AuthServiceCheckAuthBySingleArgs
	_args4.AppId = appId
	_args4.Token = token
	var _result6 AuthServiceCheckAuthBySingleResult
	var _meta5 thrift.ResponseMeta
	_meta5, _err = p.Client_().Call(ctx, "checkAuthBySingle", &_args4, &_result6)
	p.SetLastResponseMeta_(_meta5)
	if _err != nil {
		return
	}
	switch {
	case _result6.E != nil:
		return _r, _result6.E
	}

	if _ret7 := _result6.GetSuccess(); _ret7 != nil {
		return _ret7, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "checkAuthBySingle failed: unknown result")
}

// Parameters:
//   - AppId
//   - SToken
//   - LToken
func (p *AuthServiceClient) CheckAuthByDouble(ctx context.Context, appId string, sToken string, lToken string) (_r *AuthDoubleReturnee, _err error) {
	var _args8 AuthServiceCheckAuthByDoubleArgs
	_args8.AppId = appId
	_args8.SToken = sToken
	_args8.LToken = lToken
	var _result10 AuthServiceCheckAuthByDoubleResult
	var _meta9 thrift.ResponseMeta
	_meta9, _err = p.Client_().Call(ctx, "checkAuthByDouble", &_args8, &_result10)
	p.SetLastResponseMeta_(_meta9)
	if _err != nil {
		return
	}
	switch {
	case _result10.E != nil:
		return _r, _result10.E
	}

	if _ret11 := _result10.GetSuccess(); _ret11 != nil {
		return _ret11, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "checkAuthByDouble failed: unknown result")
}

type AuthServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AuthService
}

func (p *AuthServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AuthServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AuthServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAuthServiceProcessor(handler AuthService) *AuthServiceProcessor {

	self12 := &AuthServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["checkAuthByNeverExpire"] = &authServiceProcessorCheckAuthByNeverExpire{handler: handler}
	self12.processorMap["checkAuthBySingle"] = &authServiceProcessorCheckAuthBySingle{handler: handler}
	self12.processorMap["checkAuthByDouble"] = &authServiceProcessorCheckAuthByDouble{handler: handler}
	return self12
}

func (p *AuthServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x13.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x13

}

type authServiceProcessorCheckAuthByNeverExpire struct {
	handler AuthService
}

func (p *authServiceProcessorCheckAuthByNeverExpire) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err14 error
	args := AuthServiceCheckAuthByNeverExpireArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "checkAuthByNeverExpire", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AuthServiceCheckAuthByNeverExpireResult{}
	if retval, err2 := p.handler.CheckAuthByNeverExpire(ctx, args.AppId, args.Token); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *TTCustomException:
			result.E = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			_exc15 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAuthByNeverExpire: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "checkAuthByNeverExpire", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if err2 := _exc15.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if _write_err14 != nil {
				return false, thrift.WrapTException(_write_err14)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "checkAuthByNeverExpire", thrift.REPLY, seqId); err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if _write_err14 != nil {
		return false, thrift.WrapTException(_write_err14)
	}
	return true, err
}

type authServiceProcessorCheckAuthBySingle struct {
	handler AuthService
}

func (p *authServiceProcessorCheckAuthBySingle) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err16 error
	args := AuthServiceCheckAuthBySingleArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "checkAuthBySingle", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AuthServiceCheckAuthBySingleResult{}
	if retval, err2 := p.handler.CheckAuthBySingle(ctx, args.AppId, args.Token); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *TTCustomException:
			result.E = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			_exc17 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAuthBySingle: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "checkAuthBySingle", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err16 = thrift.WrapTException(err2)
			}
			if err2 := _exc17.Write(ctx, oprot); _write_err16 == nil && err2 != nil {
				_write_err16 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err16 == nil && err2 != nil {
				_write_err16 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err16 == nil && err2 != nil {
				_write_err16 = thrift.WrapTException(err2)
			}
			if _write_err16 != nil {
				return false, thrift.WrapTException(_write_err16)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "checkAuthBySingle", thrift.REPLY, seqId); err2 != nil {
		_write_err16 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err16 == nil && err2 != nil {
		_write_err16 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err16 == nil && err2 != nil {
		_write_err16 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err16 == nil && err2 != nil {
		_write_err16 = thrift.WrapTException(err2)
	}
	if _write_err16 != nil {
		return false, thrift.WrapTException(_write_err16)
	}
	return true, err
}

type authServiceProcessorCheckAuthByDouble struct {
	handler AuthService
}

func (p *authServiceProcessorCheckAuthByDouble) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err18 error
	args := AuthServiceCheckAuthByDoubleArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "checkAuthByDouble", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AuthServiceCheckAuthByDoubleResult{}
	if retval, err2 := p.handler.CheckAuthByDouble(ctx, args.AppId, args.SToken, args.LToken); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *TTCustomException:
			result.E = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err2)
			}
			_exc19 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAuthByDouble: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "checkAuthByDouble", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err18 = thrift.WrapTException(err2)
			}
			if err2 := _exc19.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
				_write_err18 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
				_write_err18 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
				_write_err18 = thrift.WrapTException(err2)
			}
			if _write_err18 != nil {
				return false, thrift.WrapTException(_write_err18)
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "checkAuthByDouble", thrift.REPLY, seqId); err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
		_write_err18 = thrift.WrapTException(err2)
	}
	if _write_err18 != nil {
		return false, thrift.WrapTException(_write_err18)
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - AppId
//   - Token
type AuthServiceCheckAuthByNeverExpireArgs struct {
	AppId string `thrift:"appId,1" db:"appId" json:"appId"`
	Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewAuthServiceCheckAuthByNeverExpireArgs() *AuthServiceCheckAuthByNeverExpireArgs {
	return &AuthServiceCheckAuthByNeverExpireArgs{}
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) GetAppId() string {
	return p.AppId
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) GetToken() string {
	return p.Token
}
func (p *AuthServiceCheckAuthByNeverExpireArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkAuthByNeverExpire_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err)
	}
	return err
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err)
	}
	return err
}

func (p *AuthServiceCheckAuthByNeverExpireArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceCheckAuthByNeverExpireArgs(%+v)", *p)
}

// Attributes:
//   - Success
//   - E
type AuthServiceCheckAuthByNeverExpireResult struct {
	Success *AuthNeverExpireReturnee `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TTCustomException       `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceCheckAuthByNeverExpireResult() *AuthServiceCheckAuthByNeverExpireResult {
	return &AuthServiceCheckAuthByNeverExpireResult{}
}

var AuthServiceCheckAuthByNeverExpireResult_Success_DEFAULT *AuthNeverExpireReturnee

func (p *AuthServiceCheckAuthByNeverExpireResult) GetSuccess() *AuthNeverExpireReturnee {
	if !p.IsSetSuccess() {
		return AuthServiceCheckAuthByNeverExpireResult_Success_DEFAULT
	}
	return p.Success
}

var AuthServiceCheckAuthByNeverExpireResult_E_DEFAULT *TTCustomException

func (p *AuthServiceCheckAuthByNeverExpireResult) GetE() *TTCustomException {
	if !p.IsSetE() {
		return AuthServiceCheckAuthByNeverExpireResult_E_DEFAULT
	}
	return p.E
}
func (p *AuthServiceCheckAuthByNeverExpireResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceCheckAuthByNeverExpireResult) IsSetE() bool {
	return p.E != nil
}

func (p *AuthServiceCheckAuthByNeverExpireResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AuthNeverExpireReturnee{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TTCustomException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkAuthByNeverExpire_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByNeverExpireResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuthServiceCheckAuthByNeverExpireResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *AuthServiceCheckAuthByNeverExpireResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceCheckAuthByNeverExpireResult(%+v)", *p)
}

// Attributes:
//   - AppId
//   - Token
type AuthServiceCheckAuthBySingleArgs struct {
	AppId string `thrift:"appId,1" db:"appId" json:"appId"`
	Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewAuthServiceCheckAuthBySingleArgs() *AuthServiceCheckAuthBySingleArgs {
	return &AuthServiceCheckAuthBySingleArgs{}
}

func (p *AuthServiceCheckAuthBySingleArgs) GetAppId() string {
	return p.AppId
}

func (p *AuthServiceCheckAuthBySingleArgs) GetToken() string {
	return p.Token
}
func (p *AuthServiceCheckAuthBySingleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkAuthBySingle_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err)
	}
	return err
}

func (p *AuthServiceCheckAuthBySingleArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err)
	}
	return err
}

func (p *AuthServiceCheckAuthBySingleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceCheckAuthBySingleArgs(%+v)", *p)
}

// Attributes:
//   - Success
//   - E
type AuthServiceCheckAuthBySingleResult struct {
	Success *AuthSingleReturnee `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TTCustomException  `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceCheckAuthBySingleResult() *AuthServiceCheckAuthBySingleResult {
	return &AuthServiceCheckAuthBySingleResult{}
}

var AuthServiceCheckAuthBySingleResult_Success_DEFAULT *AuthSingleReturnee

func (p *AuthServiceCheckAuthBySingleResult) GetSuccess() *AuthSingleReturnee {
	if !p.IsSetSuccess() {
		return AuthServiceCheckAuthBySingleResult_Success_DEFAULT
	}
	return p.Success
}

var AuthServiceCheckAuthBySingleResult_E_DEFAULT *TTCustomException

func (p *AuthServiceCheckAuthBySingleResult) GetE() *TTCustomException {
	if !p.IsSetE() {
		return AuthServiceCheckAuthBySingleResult_E_DEFAULT
	}
	return p.E
}
func (p *AuthServiceCheckAuthBySingleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceCheckAuthBySingleResult) IsSetE() bool {
	return p.E != nil
}

func (p *AuthServiceCheckAuthBySingleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AuthSingleReturnee{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TTCustomException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkAuthBySingle_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthServiceCheckAuthBySingleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuthServiceCheckAuthBySingleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *AuthServiceCheckAuthBySingleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceCheckAuthBySingleResult(%+v)", *p)
}

// Attributes:
//   - AppId
//   - SToken
//   - LToken
type AuthServiceCheckAuthByDoubleArgs struct {
	AppId  string `thrift:"appId,1" db:"appId" json:"appId"`
	SToken string `thrift:"sToken,2" db:"sToken" json:"sToken"`
	LToken string `thrift:"lToken,3" db:"lToken" json:"lToken"`
}

func NewAuthServiceCheckAuthByDoubleArgs() *AuthServiceCheckAuthByDoubleArgs {
	return &AuthServiceCheckAuthByDoubleArgs{}
}

func (p *AuthServiceCheckAuthByDoubleArgs) GetAppId() string {
	return p.AppId
}

func (p *AuthServiceCheckAuthByDoubleArgs) GetSToken() string {
	return p.SToken
}

func (p *AuthServiceCheckAuthByDoubleArgs) GetLToken() string {
	return p.LToken
}
func (p *AuthServiceCheckAuthByDoubleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SToken = v
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LToken = v
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkAuthByDouble_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err)
	}
	return err
}

func (p *AuthServiceCheckAuthByDoubleArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sToken: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sToken: ", p), err)
	}
	return err
}

func (p *AuthServiceCheckAuthByDoubleArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lToken", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lToken: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.LToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lToken (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lToken: ", p), err)
	}
	return err
}

func (p *AuthServiceCheckAuthByDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceCheckAuthByDoubleArgs(%+v)", *p)
}

// Attributes:
//   - Success
//   - E
type AuthServiceCheckAuthByDoubleResult struct {
	Success *AuthDoubleReturnee `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TTCustomException  `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceCheckAuthByDoubleResult() *AuthServiceCheckAuthByDoubleResult {
	return &AuthServiceCheckAuthByDoubleResult{}
}

var AuthServiceCheckAuthByDoubleResult_Success_DEFAULT *AuthDoubleReturnee

func (p *AuthServiceCheckAuthByDoubleResult) GetSuccess() *AuthDoubleReturnee {
	if !p.IsSetSuccess() {
		return AuthServiceCheckAuthByDoubleResult_Success_DEFAULT
	}
	return p.Success
}

var AuthServiceCheckAuthByDoubleResult_E_DEFAULT *TTCustomException

func (p *AuthServiceCheckAuthByDoubleResult) GetE() *TTCustomException {
	if !p.IsSetE() {
		return AuthServiceCheckAuthByDoubleResult_E_DEFAULT
	}
	return p.E
}
func (p *AuthServiceCheckAuthByDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceCheckAuthByDoubleResult) IsSetE() bool {
	return p.E != nil
}

func (p *AuthServiceCheckAuthByDoubleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AuthDoubleReturnee{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TTCustomException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkAuthByDouble_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthServiceCheckAuthByDoubleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuthServiceCheckAuthByDoubleResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *AuthServiceCheckAuthByDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceCheckAuthByDoubleResult(%+v)", *p)
}
